package com.nav.springboot.app.gateway.filters.factory;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.ResponseCookie;
import org.springframework.stereotype.Component;

import reactor.core.publisher.Mono;

@Component
public class NAVGatewayFilterFactory extends AbstractGatewayFilterFactory<NAVGatewayFilterFactory.Configuracion> {


	private final Logger logger = LoggerFactory.getLogger(NAVGatewayFilterFactory.class);

	public NAVGatewayFilterFactory() {
		super(Configuracion.class);

	}

	@Override
	public GatewayFilter apply(Configuracion config) {

		return new OrderGatewayFilter((exchange, chain) -> {

			logger.info("ejectutando pre gateway filter factory" + config.mensaje);
			return chain.filter(exchange).then(Mono.fromRunnable(() -> {

				Optional.ofNullable(config.cookieValor).ifPresent(cookie -> {
					exchange.getResponse().addCookie(ResponseCookie.from(config.cookieNombre, cookie).build());
				});

				logger.info("ejectutando post gateway filter factory" + config.mensaje);

			}));

		}, 2) ;
	}


	@Override
	public List<String> shortcutFieldOrder() {
		
		return Arrays.asList("mensaje","cookieNombre","cookieValor");
	}
	
	
@Override
	public String name() {
		
		return "NAV";
	}


public static class Configuracion {
		
		private String mensaje;
		private String cookieNombre;
		private String cookieValor;
		public String getMensaje() {
			return mensaje;
		}
		public void setMensaje(String mensaje) {
			this.mensaje = mensaje;
		}
		public String getCookieValor() {
			return cookieValor;
		}
		public void setCookieValor(String cookieValor) {
			this.cookieValor = cookieValor;
		}
		public String getCookieNombre() {
			return cookieNombre;
		}
		public void setCookieNombre(String cookieNombre) {
			this.cookieNombre = cookieNombre;
		}

}
}
